// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
)

const countUsers = `-- name: CountUsers :one
select count(*) from users
`

// CountUsers
//
//	select count(*) from users
func (q *Queries) CountUsers(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users where id=?
`

// DeleteUser
//
//	delete from users where id=?
func (q *Queries) DeleteUser(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, deleteUser, id)
	return err
}

const insertUser = `-- name: InsertUser :one
insert into
    users (id, created_at, updated_at, email, is_admin, password)
values
    (?, datetime('now'), datetime('now'), ?, ?, ?)
returning id, created_at, updated_at, email, is_admin, password
`

type InsertUserParams struct {
	ID       string
	Email    string
	IsAdmin  int64
	Password []byte
}

// InsertUser
//
//	insert into
//	    users (id, created_at, updated_at, email, is_admin, password)
//	values
//	    (?, datetime('now'), datetime('now'), ?, ?, ?)
//	returning id, created_at, updated_at, email, is_admin, password
func (q *Queries) InsertUser(ctx context.Context, db DBTX, arg InsertUserParams) (User, error) {
	row := db.QueryRowContext(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.IsAdmin,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsAdmin,
		&i.Password,
	)
	return i, err
}

const queryAllUsers = `-- name: QueryAllUsers :many
select id, created_at, updated_at, email, is_admin, password from users
`

// QueryAllUsers
//
//	select id, created_at, updated_at, email, is_admin, password from users
func (q *Queries) QueryAllUsers(ctx context.Context, db DBTX) ([]User, error) {
	rows, err := db.QueryContext(ctx, queryAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.IsAdmin,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryPaginatedUsers = `-- name: QueryPaginatedUsers :many
select id, created_at, updated_at, email, is_admin, password from users 
order by created_at desc 
limit ? offset ?
`

type QueryPaginatedUsersParams struct {
	Limit  int64
	Offset int64
}

// QueryPaginatedUsers
//
//	select id, created_at, updated_at, email, is_admin, password from users
//	order by created_at desc
//	limit ? offset ?
func (q *Queries) QueryPaginatedUsers(ctx context.Context, db DBTX, arg QueryPaginatedUsersParams) ([]User, error) {
	rows, err := db.QueryContext(ctx, queryPaginatedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.IsAdmin,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryUserByEmail = `-- name: QueryUserByEmail :one
select id, created_at, updated_at, email, is_admin, password from users where email=?
`

// QueryUserByEmail
//
//	select id, created_at, updated_at, email, is_admin, password from users where email=?
func (q *Queries) QueryUserByEmail(ctx context.Context, db DBTX, email string) (User, error) {
	row := db.QueryRowContext(ctx, queryUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsAdmin,
		&i.Password,
	)
	return i, err
}

const queryUserByID = `-- name: QueryUserByID :one
select id, created_at, updated_at, email, is_admin, password from users where id=?
`

// QueryUserByID
//
//	select id, created_at, updated_at, email, is_admin, password from users where id=?
func (q *Queries) QueryUserByID(ctx context.Context, db DBTX, id string) (User, error) {
	row := db.QueryRowContext(ctx, queryUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsAdmin,
		&i.Password,
	)
	return i, err
}

const queryUsers = `-- name: QueryUsers :many
select id, created_at, updated_at, email, is_admin, password from users
`

// QueryUsers
//
//	select id, created_at, updated_at, email, is_admin, password from users
func (q *Queries) QueryUsers(ctx context.Context, db DBTX) ([]User, error) {
	rows, err := db.QueryContext(ctx, queryUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.IsAdmin,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
update users
    set updated_at=datetime('now'), email=?, is_admin=?, password=?
where id = ?
returning id, created_at, updated_at, email, is_admin, password
`

type UpdateUserParams struct {
	Email    string
	IsAdmin  int64
	Password []byte
	ID       string
}

// UpdateUser
//
//	update users
//	    set updated_at=datetime('now'), email=?, is_admin=?, password=?
//	where id = ?
//	returning id, created_at, updated_at, email, is_admin, password
func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) (User, error) {
	row := db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.IsAdmin,
		arg.Password,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsAdmin,
		&i.Password,
	)
	return i, err
}
